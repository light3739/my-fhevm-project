import React, { useState, useEffect } from 'react';
import { FHEGameClient } from './utils/fhe';
import contractABI from './contracts/EncryptedGuessGame.json';

const CONTRACT_ADDRESS = "0x..."; // –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞

interface GameInfo {
  host: string;
  startTime: bigint;
  maxAttempts: bigint;
  state: number;
  winner: string;
  prize: bigint;
}

function App() {
  const [client, setClient] = useState<FHEGameClient | null>(null);
  const [connected, setConnected] = useState(false);
  const [currentAccount, setCurrentAccount] = useState<string>('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
  const [secretNumber, setSecretNumber] = useState<number>(50);
  const [maxAttempts, setMaxAttempts] = useState<number>(10);
  const [prizeAmount, setPrizeAmount] = useState<string>('0.1');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
  const [gameId, setGameId] = useState<number>(0);
  const [guess, setGuess] = useState<number>(50);
  const [gameInfo, setGameInfo] = useState<GameInfo | null>(null);
  const [playerAttempts, setPlayerAttempts] = useState<number>(0);
  const [gameResult, setGameResult] = useState<string>('');
  
  // –°—Ç–∞—Ç—É—Å—ã
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    initClient();
  }, []);

  const initClient = async () => {
    try {
      const gameClient = new FHEGameClient(CONTRACT_ADDRESS, contractABI.abi);
      await gameClient.init();
      setClient(gameClient);
      setConnected(true);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
      const provider = new (window as any).ethereum.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      setCurrentAccount(await signer.getAddress());
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É: ' + (err as Error).message);
    }
  };

  const handleCreateGame = async () => {
    if (!client) return;
    
    setLoading(true);
    setError('');
    
    try {
      const txHash = await client.createGame(secretNumber, maxAttempts, prizeAmount);
      setGameResult(`–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txHash}`);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: ' + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  const handleMakeGuess = async () => {
    if (!client) return;
    
    setLoading(true);
    setError('');
    
    try {
      const result = await client.makeGuess(gameId, guess);
      
      const resultTexts = {
        0: 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏!',
        1: 'üìâ –í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ',
        2: 'üìà –í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ'
      };
      
      setGameResult(resultTexts[result.result as 0 | 1 | 2] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      const attempts = await client.getPlayerAttempts(gameId, currentAccount);
      setPlayerAttempts(attempts);
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–≥–∞–¥–∞—Ç—å: ' + (err as Error).message);
    } finally {
      setLoading(false);
    }
  };

  const loadGameInfo = async () => {
    if (!client) return;
    
    try {
      const info = await client.getGameInfo(gameId);
      setGameInfo(info);
      
      const attempts = await client.getPlayerAttempts(gameId, currentAccount);
      setPlayerAttempts(attempts);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ: ' + (err as Error).message);
    }
  };

  if (!connected) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 to-purple-900 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-xl">
          <h1 className="text-2xl font-bold mb-4">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É</h1>
          {error && <p className="text-red-600 mb-4">{error}</p>}
          <button 
            onClick={initClient}
            className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
          >
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-purple-900 p-4">
      <div className="max-w-4xl mx-auto">
        <header className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">
            üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
          </h1>
          <p className="text-blue-200">
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ–º–æ–º–æ—Ä—Ñ–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (FHE)
          </p>
          <p className="text-sm text-blue-300 mt-2">
            –ê–∫–∫–∞—É–Ω—Ç: {currentAccount.slice(0, 6)}...{currentAccount.slice(-4)}
          </p>
        </header>

        <div className="grid md:grid-cols-2 gap-6">
          {/* –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã */}
          <div className="bg-white p-6 rounded-lg shadow-xl">
            <h2 className="text-xl font-bold mb-4">–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  –ó–∞–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ (1-100):
                </label>
                <input
                  type="number"
                  min="1"
                  max="100"
                  value={secretNumber}
                  onChange={(e) => setSecretNumber(Number(e.target.value))}
                  className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">
                  –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫:
                </label>
                <input
                  type="number"
                  min="1"
                  max="20"
                  value={maxAttempts}
                  onChange={(e) => setMaxAttempts(Number(e.target.value))}
                  className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-2">
                  –ü—Ä–∏–∑ (ETH):
                </label>
                <input
                  type="number"
                  step="0.01"
                  min="0.01"
                  value={prizeAmount}
                  onChange={(e) => setPrizeAmount(e.target.value)}
                  className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <button
                onClick={handleCreateGame}
                disabled={loading}
                className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700 disabled:opacity-50"
              >
                {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'}
              </button>
            </div>
          </div>

          {/* –£—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ */}
          <div className="bg-white p-6 rounded-lg shadow-xl">
            <h2 className="text-xl font-bold mb-4">–ò–≥—Ä–∞—Ç—å</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  ID –∏–≥—Ä—ã:
                </label>
                <div className="flex gap-2">
                  <input
                    type="number"
                    min="0"
                    value={gameId}
                    onChange={(e) => setGameId(Number(e.target.value))}
                    className="flex-1 p-2 border rounded focus:ring-2 focus:ring-blue-500"
                  />
                  <button
                    onClick={loadGameInfo}
                    className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                  >
                    –ó–∞–≥—Ä—É–∑–∏—Ç—å
                  </button>
                </div>
              </div>

              {gameInfo && (
                <div className="bg-gray-50 p-3 rounded text-sm">
                  <p><strong>–•–æ—Å—Ç:</strong> {gameInfo.host.slice(0, 6)}...{gameInfo.host.slice(-4)}</p>
                  <p><strong>–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫:</strong> {gameInfo.maxAttempts.toString()}</p>
                  <p><strong>–ü—Ä–∏–∑:</strong> {Number(gameInfo.prize) / 1e18} ETH</p>
                  <p><strong>–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏:</strong> {playerAttempts}</p>
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium mb-2">
                  –í–∞—à–∞ –¥–æ–≥–∞–¥–∫–∞ (1-100):
                </label>
                <input
                  type="number"
                  min="1"
                  max="100"
                  value={guess}
                  onChange={(e) => setGuess(Number(e.target.value))}
                  className="w-full p-2 border rounded focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <button
                onClick={handleMakeGuess}
                disabled={loading || !gameInfo}
                className="w-full bg-purple-600 text-white py-2 rounded hover:bg-purple-700 disabled:opacity-50"
              >
                {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–£–≥–∞–¥–∞—Ç—å!'}
              </button>
            </div>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—à–∏–±–∫–∏ */}
        {(gameResult || error) && (
          <div className="mt-6 bg-white p-4 rounded-lg shadow-xl">
            {error && (
              <div className="text-red-600 font-medium">
                ‚ùå {error}
              </div>
            )}
            {gameResult && (
              <div className="text-green-600 font-medium">
                {gameResult}
              </div>
            )}
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ FHE */}
        <div className="mt-8 bg-white/10 text-white p-6 rounded-lg">
          <h3 className="text-lg font-bold mb-2">üîí –û —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ FHE</h3>
          <p className="text-sm text-blue-200">
            –≠—Ç–∞ –∏–≥—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ–º–æ–º–æ—Ä—Ñ–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (FHE), –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç 
            –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –í–∞—à–∏ –¥–æ–≥–∞–¥–∫–∏ 
            –∏ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –æ—Å—Ç–∞—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –Ω–∞ –≤—Å–µ–º –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –∏–≥—Ä—ã!
          </p>
        </div>
      </div>
    </div>
  );
}

export default App;
